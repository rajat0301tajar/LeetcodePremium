Given an array of meeting time intervals intervals where intervals[i] = [starti, endi], return the minimum number of conference rooms required.

 

Example 1:

Input: intervals = [[0,30],[5,10],[15,20]]
Output: 2

Example 2:

Input: intervals = [[7,10],[2,4]]
Output: 1

 

Constraints:

    1 <= intervals.length <= 104
    0 <= starti < endi <= 106



class Solution {
public:
    int minMeetingRooms(vector<vector<int>>& intervals) {
        // smaller starting time interval first
        sort(intervals.begin(), intervals.end()); 
        int ans = 1;
        int n = intervals.size();
        // smaller ending time interval first
        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq;
        pq.push({intervals[0][1], intervals[0][0]});
        for(int i = 1; i < n; i++) {
            vector<int> interval = intervals[i];
            while(!pq.empty() && pq.top()[0] <= interval[0]) {
                pq.pop();
            } 
            pq.push({interval[1], interval[0]});
            ans = max(ans, (int)pq.size());
        }       
        return ans; 
    }
};
