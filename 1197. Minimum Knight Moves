In an infinite chess board with coordinates from -infinity to +infinity, you have a knight at square [0, 0].

A knight has 8 possible moves it can make, as illustrated below. Each move is two squares in a cardinal direction, then one square in an orthogonal direction.

Return the minimum number of steps needed to move the knight to the square [x, y]. It is guaranteed the answer exists.

 

Example 1:

Input: x = 2, y = 1
Output: 1
Explanation: [0, 0] → [2, 1]

Example 2:

Input: x = 5, y = 5
Output: 4
Explanation: [0, 0] → [2, 1] → [4, 2] → [3, 4] → [5, 5]

 

Constraints:

    -300 <= x, y <= 300
    0 <= |x| + |y| <= 300



// C++ || BFS || strong constraints || Offset for negative indexes

class Solution {
public:
    int dx[8] = {2,1,-1,-2,-2,-1,1,2};
    int dy[8] = {1,2,2,1,-1,-2,-2,-1};
    int minKnightMoves(int tx, int ty) {
        queue<pair<int, int>> Q;
        bool visited[601][601];
        memset(visited, false, sizeof(visited));
        Q.push({0, 0});
        visited[0][0] = true;
        int moves = 0;
        while(!Q.empty()) {
            int sz = Q.size();
            while(sz--) {
                pair<int, int> cell = Q.front();
                Q.pop();
                int x = cell.first;
                int y = cell.second;
                // cout << "x = " << x << " y = " << y << endl;
                if(tx == x && ty == y) {
                    return moves;
                }
                for(int i = 0; i < 8; i++) {
                    int nx = x + dx[i];
                    int ny = y + dy[i];
                    if(nx < -300 || nx > 300 || ny < -300 || ny > 300) {
                        continue;
                    }
                    if(visited[nx + 300][ny + 300]) {
                        continue;
                    }
                    Q.push({nx, ny});
                    visited[nx + 300][ny + 300] = true;
                }
            }
            moves++;
        }
        return moves;
    }
};
