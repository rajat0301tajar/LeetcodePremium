Given an m x n binary matrix mat, return the length of the longest line of consecutive one in the matrix.

The line could be horizontal, vertical, diagonal, or anti-diagonal.

 

Example 1:

Input: mat = [[0,1,1,0],[0,1,1,0],[0,0,0,1]]
Output: 3

Example 2:

Input: mat = [[1,1,1,1],[0,1,1,0],[0,0,0,1]]
Output: 4

 

Constraints:

    m == mat.length
    n == mat[i].length
    1 <= m, n <= 104
    1 <= m * n <= 104
    mat[i][j] is either 0 or 1.



// C++ || DP || Nice question

class Solution {
public:

    int longestLine(vector<vector<int>>& mat) {
        int n = mat.size();
        int m = mat[0].size();
        int dp[n][m][4];
        memset(dp, 0, sizeof(dp));
        int ans = 0;
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                for(int k = 0; k < 4 && mat[i][j] == 1; k++) {
                    if(k == 0) { // from left
                        dp[i][j][k] = 1 + ((j >= 1) ? dp[i][j - 1][k] : 0);
                    } else if(k == 1) { // from diagonal
                        dp[i][j][k] = 1 + ((i >= 1) ? dp[i - 1][j][k] : 0);
                    } else if(k == 2){ // from top
                        dp[i][j][k] = 1 + ((i >= 1 && j >= 1) ? dp[i - 1][j - 1][k] : 0);
                    } else {
                        dp[i][j][k] = 1 + ((i >= 1 && j + 1 < m) ? dp[i - 1][j + 1][k] : 0);
                    }
                }
            }
        }
        
        for(int k = 0; k < 4; k++) {
            for(int i = 0; i < n; i++) {
                for(int j = 0; j < m; j++) {
                    ans = max(ans, dp[i][j][k]);
                }
            }
        }
        return ans;
    }
};
