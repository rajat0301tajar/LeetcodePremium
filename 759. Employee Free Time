We are given a list schedule of employees, which represents the working time for each employee.

Each employee has a list of non-overlapping Intervals, and these intervals are in sorted order.

Return the list of finite intervals representing common, positive-length free time for all employees, also in sorted order.

(Even though we are representing Intervals in the form [x, y], the objects inside are Intervals, not lists or arrays. For example, schedule[0][0].start = 1, schedule[0][0].end = 2, and schedule[0][0][0] is not defined).  Also, we wouldn't include intervals like [5, 5] in our answer, as they have zero length.

 

Example 1:

Input: schedule = [[[1,2],[5,6]],[[1,3]],[[4,10]]]
Output: [[3,4]]
Explanation: There are a total of three employees, and all common
free time intervals would be [-inf, 1], [3, 4], [10, inf].
We discard any intervals that contain inf as they aren't finite.

Example 2:

Input: schedule = [[[1,3],[6,7]],[[2,4]],[[2,5],[9,12]]]
Output: [[5,6],[7,9]]

 

Constraints:

    1 <= schedule.length , schedule[i].length <= 50
    0 <= schedule[i].start < schedule[i].end <= 10^8



// C++ || Merge Intervals || Inspiration from Range Module || Great question

/*
// Definition for an Interval.
class Interval {
public:
    int start;
    int end;

    Interval() {}

    Interval(int _start, int _end) {
        start = _start;
        end = _end;
    }
};
*/

class Solution {
public:
    map<int, int> mp;

    void deleteInterval(int left, int right) {
        if(mp.empty()) {
            return;
        }
        auto it = mp.lower_bound(left); // left <= it->first
        if(it != mp.begin()) {
            it--; // it->first < left
        }
        vector<int> v;
        while(it != mp.end() && it->first < right) {
            if(it->first < left && it->second > left) {
                int temp = it->second;
                it->second = left;
                if(temp > right) {
                    mp[right] = temp;
                }
            } else if(it->first >= left) {
                if(it->second > right) {
                    mp[right] = it->second;
                }
                v.push_back(it->first);
            }
            it++;
        }
        for(auto idx : v) {
            mp.erase(idx);
        } 
    }

    void addInterval(int left, int right) {
        deleteInterval(left, right);
        mp[left] = right;
        auto it = mp.find(left);
        if(it != mp.begin() && prev(it)->second == left) {
            prev(it)->second = right;
            it--;
            mp.erase(left);
        }
        if(it != prev(mp.end()) && next(it)->first == right) {
            it->second = next(it)->second;
            mp.erase(next(it));
        }
    }

    vector<Interval> employeeFreeTime(vector<vector<Interval>> schedule) {
        vector<Interval> ans;

        for(vector<Interval> intervals : schedule) {
            for(Interval interval : intervals) {
                addInterval(interval.start, interval.end);
            }
        }
        auto it = mp.begin();
        while(it != mp.end()) {
            auto prev = it;
            it++;
            if(it != mp.end()) {
                ans.push_back(*(new Interval(prev->second, it->first)));
            }
        }
        return ans;
    }
};
