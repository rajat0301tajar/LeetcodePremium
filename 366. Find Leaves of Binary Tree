Given the root of a binary tree, collect a tree's nodes as if you were doing this:

    Collect all the leaf nodes.
    Remove all the leaf nodes.
    Repeat until the tree is empty.

 

Example 1:

Input: root = [1,2,3,4,5]
Output: [[4,5,3],[2],[1]]
Explanation:
[[3,5,4],[2],[1]] and [[3,4,5],[2],[1]] are also considered correct answers since per each level it does not matter the order on which elements are returned.

Example 2:

Input: root = [1]
Output: [[1]]

 

Constraints:

    The number of nodes in the tree is in the range [1, 100].
    -100 <= Node.val <= 100



// C++ || Using outDegree concept similar to in Topological sort

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    unordered_map<TreeNode*, int> outDegree;
    unordered_map<TreeNode*, TreeNode*> parent;

    void populateData(TreeNode *root) {
        if(root == NULL) {
            return;
        }
        if(root->left != NULL) {
            outDegree[root]++;
            parent[root->left] = root;
        } else {
            outDegree[root] += 0;
        }
        if(root->right != NULL) {
            outDegree[root]++;
            parent[root->right] = root;
        } else {
            outDegree[root] += 0;
        }
        populateData(root->left);
        populateData(root->right);
    }

    vector<vector<int>> findLeaves(TreeNode* root) {
        populateData(root);
        queue<TreeNode*> Q;
        for(pair<TreeNode*, int> p : outDegree) {
            // cout << p.first->val << " " << p.second << endl;
            if(p.second == 0) {
                Q.push(p.first);
            }
        }
        vector<vector<int>> ans;
        while(!Q.empty()) {
            int sz = Q.size();
            // cout << sz << endl;
            vector<int> v;
            while(sz--) {
                TreeNode *node = Q.front();
                v.push_back(node->val);
                // cout << "node val = " << node->val << endl;
                Q.pop();
                TreeNode *par = parent[node];
                if(par != NULL) {
                    outDegree[par]--;
                    if(outDegree[par] == 0) {
                        Q.push(par);
                    }
                }
            }
            ans.push_back(v);
        }      
        return ans;  
    }
};
